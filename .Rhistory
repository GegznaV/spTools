do_ROC_CV_by_gr_2(class, "gr")
devtools::load_all(".")
do_ROC_CV_by_gr_2(class, "gr")
range
devtools::load_all(".")
do_ROC_CV_by_gr_2(class, "gr")
Spectra
Spectra[, , range_]
do_ROC_CV_by_gr_2 <- function(Spectra,
variables_to_analyze = "CitoGr",
k_folds = 3,
times = 10,
range_ = min ~ max
) {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Spectra <- readRDS("D:/Dokumentai/R/Spektroskopija/PAP_RK_2015/Data/2-tmp-spectra.RDS")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
force(range_)
Spectra <- Spectra[, , range_]
# container <- knitrContainer()
rez <- data.frame()
for (i in seq_along(variables_to_analyze)) {
Var <- variables_to_analyze[i]
rez <- bind_rows(rez,
ROC_with_cv_2(
Spectra,
Var = Var,
k = k_folds,
times = times,
range_percent = 95
))
gc()
}
rez
}
range_ = min ~ max
Spectra[, , range_]
devtools::load_all(".")
do_ROC_CV_by_gr_2(class, "gr")
do_ROC_CV_by_gr_2
library(spTools)
do_ROC_CV_by_gr_2(class, "gr")
do_ROC_CV_by_gr_2(class, "gr")
clear_fun()
(class, "gr")
do_ROC_CV_by_gr_2(class, "gr")
do_ROC_CV_by_gr_2(Spectra2, "gr")
do_ROC_CV_by_gr_2(Spectra, "gr")
Spectra
library(doParallel)
detectCores()
variables_to_analyze
variables_to_analyze <-
c(
#         # "Batch",
#
"CitoGr"
#         # , "Hybrid_normal"
#         # , "Hybrid_cervicitis"
#         # , "Hybrid_cin3_cis"
#
#         # ,"HistGr"
#         # ,"HistGr1", "HistGr2"
#
, "HPV_16", "HPV_hr", "p16_Ki67"
#         # , "age_gr",     "Sediment_size2"
)
variables_to_analyze
detectCores()
library(spTools)
library(spTools)
library(spTools)
library(spTools)
dplyr::bind_rows
library(spTools)
library(spTools)
library(spTools)
Spectra <- readRDS("D:/Dokumentai/R/Spektroskopija/PAP_RK_2015/Data/2-tmp-spectra.RDS")
devtools::load_all(".")
k_folds = 3
times   = 10
variables_to_analyze <-
c(
# "Batch",
"CitoGr"
# , "Hybrid_normal"
# , "Hybrid_cervicitis"
# , "Hybrid_cin3_cis"
# ,"HistGr"
# ,"HistGr1", "HistGr2"
# , "HPV_16", "HPV_hr", "p16_Ki67"
# , "age_gr",     "Sediment_size2"
)
Spectra <- Spectra[, , min ~ 700]
suppressPackageStartupMessages({
library(doParallel)
library(foreach)
})
cl <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(cl)
rez <- data.frame()
i
i=1
Var <- variables_to_analyze[i]
Var
rez
tryCatch(
rez <- rbind(rez,
ROC_with_cv_2(
Spectra,
Var = Var,
k = k_folds,
times = times,
range_percent = 95
)),
error   = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
} ,
finally = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
}
)
rez
foreach(i = seq_along(variables_to_analyze),
.combine = "rbind") %dopar% {
Var <- variables_to_analyze[i]
tryCatch(
rez <- rbind(rez,
ROC_with_cv_2(
Spectra,
Var = Var,
k = k_folds,
times = times,
range_percent = 95
)),
error   = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
} ,
finally = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
}
)
gc()
}
rez
variables_to_analyze <-
c(
# "Batch",
"CitoGr"
# , "Hybrid_normal"
# , "Hybrid_cervicitis"
# , "Hybrid_cin3_cis"
# ,"HistGr"
# ,"HistGr1", "HistGr2"
# , "HPV_16", "HPV_hr"
, "p16_Ki67"
# , "age_gr",     "Sediment_size2"
)
rez <- data.frame()
Var
foreach(i = seq_along(variables_to_analyze),
.combine = "rbind") %dopar% {
Var <- variables_to_analyze[i]
tryCatch(
rez <- rbind(rez,
ROC_with_cv_2(
Spectra,
Var = Var,
k = k_folds,
times = times,
range_percent = 95
)),
error   = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
} ,
finally = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
}
)
gc()
}
rez
tryCatch(
rez <- rbind(rez,
ROC_with_cv_2(
Spectra,
Var = Var,
k = k_folds,
times = times,
range_percent = 95
)),
error   = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
} ,
finally = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
}
)
rez
Var
variables_to_analyze
seq_along(variables_to_analyze)
message('**Analizės atlinti nepavyko: ', i)
Var
i
for (i in seq_along(variables_to_analyze)) {
# foreach(i = seq_along(variables_to_analyze),
#         .combine = "rbind") %dopar% {
Var <- variables_to_analyze[i]
tryCatch(
rez <- rbind(rez,
ROC_with_cv_2(
Spectra,
Var = Var,
k = k_folds,
times = times,
range_percent = 95
)),
error   = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
} ,
finally = function(x) {
message('**Analizės atlinti nepavyko: ', i)
NULL
}
)
gc()
}
rez
Var
ttail(Var)
tail(Var)
tail(rez)
summary(rez)
summary(BioStat::all_chr_to_factor(rez))
library(spTools)
stopCluster(cl)
library(spTools)
gc()
library(spTools)
gg_barplot
devtools::load_all(".")
gg_barplot
Spectra
gr
gr = "HistGr"
ID = "ID"
alpha = 1
Spectra$ID <- getVarValues(ID, Spectra)
bp1 <- gg_barplot(gr, Spectra) +
labs(y = "Number of spectra", title = "Spectra") + x30()
bp1 <- gg_barplot(gr, Spectra) +
labs(y = "Number of spectra", title = "Spectra") + x30()
gg_barplot(gr, Spectra)
Spectra
Spectra
Spectra$..
ggplot(Spectra$.., aes_string(gr)) +
geom_bar(stat = "count",
aes_string(fill = gr),
color = 1,
alpha = alpha) +
geom_text(stat = 'count', aes(label = ..count..), vjust = -.2) +
x30() +
labs(x = labels(Spectra, gr)) +
scale_x_discrete(drop = FALSE) +
scale_fill_discrete(drop = FALSE)
Spectra$ID <- getVarValues(ID, Spectra)
bp1 <- gg_barplot(gr, Spectra) +
labs(y = "Number of spectra", title = "Spectra") + x30()
gg_barplot
devtools::load_all(".")
bp1 <- gg_barplot(Spectra, gr) +
labs(y = "Number of spectra", title = "Spectra") + x30()
LIMS <- c(ggLims(bp1, "x"), 0, ggLims(bp1)[2])
bp1 <- bp1 + ggLims(LIMS)
bp2 <-
gg_barplot(Spectra[!duplicated(Spectra$ID)], gr,  .5) +
labs(y = "Number of specimens", title = "Samples") +
ggLims(LIMS, expand = FALSE) +
x30()
cowplot::plot_grid(bp1, bp2,
nrow = 1,
align = "h")
library(spTools)
cutoffs_plot
cutoffs_plot
percent2probs
devtools::load_all(".")
percent2probs
percent2probs(50)
library(spTools)
library(spTools)
sp_compared
ggplot_fun
devtools::load_all(".")
ggplot_fun
ggplot_mean_and_range
ggplot_fun <- ggplot_mean_and_range
ggplot_fun(TEST)  + ggtitle("Testing")
library(spTools)
library(spTools)
library(spTools)
library(doParallel)
library(foreach)
library(spTools)
library(spTools)
library(spTools)
rlang::syms
rlang::sym
library(spTools)
library(spTools)
rlang::sym(glue::glue("-{Var}"))
glue::glue("-{Var}")
rlang::sym(glue::glue("-{Var}"))
!!rlang::syms(glue::glue("-{Var}"))
rlang::syms
install.packages("rlang")
!!!rlang::syms(glue::glue("-{Var}"))
rlang::syms(glue::glue("-{Var}"))
syms
glue
rlang::syms(glue::glue("-{Var}"))
!!!rlang::syms(glue::glue("-{Var}"))
!!! rlang::syms(glue::glue("-{Var}"))
!!!
library(dplyr)
!!! rlang::syms(glue::glue("-{Var}"))
select(!!! rlang::syms(glue::glue("-{Var}")))
Var
Spectra
select(Spectra$.., !!! rlang::syms(glue::glue("-{Var}")))
Spectra$p16_Ki67
select(Spectra$.., !!! rlang::syms(glue::glue("-{Var}")))
select(Spectra$.., !! rlang::sym(glue::glue("-{Var}")))
Spectra$..  %>% select(, !! rlang::sym(glue::glue("-{Var}")))
Spectra$..  %>% select(!! rlang::sym(glue::glue("-{Var}")))
Spectra$..  %>% select(-p16_Ki67)
Spectra$..  %>% select(-p16_Ki67)
Spectra$..  %>% select(!! rlang::sym(glue::glue("-{Var}")))
Spectra$..  %>% select(Var)))
Spectra$..  %>% select(Var))
Spectra$..  %>% select(Var)
Spectra$..  %>% select(-Var)
Spectra$..  %>% select(-Var)
-Var
Var
pp <- glue::glue("-{Var}")
Spectra$..  %>% select(!! rlang::sym(pp))
pp <- rlang::sym(glue::glue("-{Var}"))
Spectra$..  %>% select(!! pp)
pp <- rlang::sym(glue::glue("-{Var}"))
Spectra$..  %>% select(!!pp)
pp
pp <- rlang::sym(glue::glue("{Var}"))
Spectra$..  %>% select(!!pp)
pp <- rlang::sym(glue::glue("-{Var}"))
Spectra$..  %>% select(starts_with(glue::glue("-{Var}")))
pp <- rlang::sym(glue::glue("-{Var}"))
Spectra$..  %>% select(starts_with(Var))
pp <- rlang::sym(glue::glue("-{Var}"))
Spectra$..  %>% select(-starts_with(Var))
pp <- rlang::sym(glue::glue("-{Var}"))
Spectra$..  %>% select(-c(Var))
pp <- rlang::sym(glue::glue("-{Var}"))
Spectra$..  %>% select(-one_of(Var))
library(spTools)
head(starwars)
cols <- c("name", "height", "mass")
# `select()` examples ====
# Deprecated dplyr 0.5.0 method
select_(starwars, .dots = cols)
# Works, but with integer positions
quosure <- quo(1:3)
select(starwars, !!quosure)
# Works, but only for single name
quosure <- quo(name)
select(starwars, !!quosure)
# Works, but is there an unquote approach like above?
select(starwars, one_of(cols))
# `arrange()` examples ====
# Deprecated dplyr 0.5.0 method
arrange_(starwars, .dots = cols)
head(starwars)
cols <- c("name", "height", "mass")
# `select()` examples ====
# Deprecated dplyr 0.5.0 method
select_(starwars, .dots = cols)
# Works, but with integer positions
quosure <- quo(1:3)
select(starwars, !!quosure)
# Works, but only for single name
quosure <- quo(name)
select(starwars, !!quosure)
# Works, but is there an unquote approach like above?
select(starwars, one_of(cols))
# `arrange()` examples ====
# Deprecated dplyr 0.5.0 method
arrange(starwars, one_of(cols))
head(starwars)
cols <- c("name", "height", "mass")
arrange(starwars, one_of(cols))
library(spTools)
pkgdown::build_site(); spMisc::html_enable_favicons()
pkgdown::build_site(); spMisc::html_enable_favicons()
pkgdown::build_home()
pkgdown::template_navbar()
pkgdown::build_site(); spMisc::html_enable_favicons()
library(spTools)
pkgdown::build_site(); spMisc::html_enable_favicons()
pkgdown::build_site(); spMisc::html_enable_favicons()
Spectra
variables_to_analyze
Spectra
k_folds
times
variables_to_analyze
i
Var
rez
rez <- data.frame()
range_percent
range_percent = 95
times
k
k = k_folds
Var
k
Spectra
Var
Spectra_gr
Spectra_gr = Spectra
n_min
n_min = k
k
Var
Spectra_gr
range_percent
var_values    <- getVarValues(Var, Spectra_gr)
devtools::load_all(".")
var_values    <- getVarValues(Var, Spectra_gr)
NA_ind        <- is.na(var_values)
NA_ind
too_few_in_gr <- has_too_few_IDs(Spectra_gr, Var, n_min = n_min)
has_too_few_IDs
too_few_in_gr <- has_too_few_IDs(Spectra_gr, Var, n_min = n_min)
tooFew_ind    <- var_values %in% too_few_in_gr
Spectra_gr    <- Spectra_gr[!NA_ind & !tooFew_ind, ]
Spectra_gr
eval_(paste0("Spectra_gr$", Var, " %<>% droplevels()"))
eval_(paste0("Spectra_gr$", Var, " %<>% droplevels()"))
seeds
seeds = 2
Spectra_gr
block_by
createFoldsBS(Spectra_gr,
block_by = "ID",
stratify_by = Var,
k = k,
times = times,
seeds = seeds)
createFoldsBS
devtools::load_all(".")
createFoldsBS
cvo <- createFoldsBS(Spectra_gr,
block_by = "ID",
stratify_by = Var,
k = k,
times = times,
seeds = seeds)
cvo
cvo <- cvo_create_folds(Spectra_gr,
block_by = "ID",
stratify_by = Var,
k = k,
times = times,
seeds = seeds)
cvo
Spectra_gr
glue
eval_(glue::glue("Spectra_gr${Var} %<>% droplevels()"))
var_values    <- getVarValues(Var, Spectra_gr)
NA_ind        <- is.na(var_values)
too_few_in_gr <- has_too_few_IDs(Spectra_gr, Var, n_min = n_min)
tooFew_ind    <- var_values %in% too_few_in_gr
Spectra_gr    <- Spectra_gr[!NA_ind & !tooFew_ind, ]
# Drop unnecessary levels
eval_(glue::glue("Spectra_gr${Var} %<>% droplevels()"))
cvo <- cvo_create_folds(Spectra_gr,
block_by = "ID",
stratify_by = Var,
k = k,
times = times,
seeds = seeds)
Spectra_gr
dir.create("~/__tmp-data__")
sp = Spectra_gr
by = Var
measure = "BAC"
cvo = cvo
save.image("~/__tmp-data__/tmp.RData")
base::save.image("~/__tmp-data__/tmp.RData")
sp_class_perform_cv
